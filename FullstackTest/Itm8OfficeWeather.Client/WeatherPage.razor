@page "/"
@using Microsoft.FluentUI.AspNetCore.Components
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@inject IOfficeWeatherClient OfficeWeatherClient
@inject IToastService ToastService

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>Showing weather data for offices.</p>

@if (officeWeathers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <!-- This page is rendered in SSR mode, so the FluentDataGrid component does not offer any interactivity (like sorting). -->
    <FluentDataGrid Id="weathergrid" Items="@officeWeathers" TGridItem="OfficeWeather">
        <PropertyColumn Title="Date" Property="@(c => c!.ValidTime.LocalDateTime.ToString("g"))" Align="Align.Start" Sortable="true" />
        <PropertyColumn Title="Name" Property="@(c => c!.Name)" Sortable="true" />
        <PropertyColumn Title="Location" Property="@(c => c!.Location)" Sortable="true" />
        <PropertyColumn Title="Weather" Property="@(c => c!.WeatherSymbol)" Sortable="true" />
        <PropertyColumn Title="Temp. (C)" Property="@(c => c!.TemperatureC + "Â°")" Sortable="true" />
        <PropertyColumn Title="Precipitation" Property="@(c => c!.Precipitation.Category)" Sortable="true" />
        <PropertyColumn Title="Precipitation (%)" Property="@(c => c!.Precipitation.Percent + "%")" Sortable="true" />
        <PropertyColumn Title="Coordinates" Property="@(c => $"{c!.Coordinates.Lat}, {c!.Coordinates.Lon}")"
            Align="Align.End" Sortable="true" />
    </FluentDataGrid>
}

@code
{
    IQueryable<OfficeWeather>? officeWeathers;

    protected override async Task OnInitializedAsync()
    {
        try 
        {
            officeWeathers = (await OfficeWeatherClient.GetWeatherDataAsync()).AsQueryable();
        }
        catch(ApiException<ProblemDetails> exc) 
        {
            ToastService.ShowError(exc.Result.Detail);
        }
    }
}